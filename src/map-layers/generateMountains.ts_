import { createNoise2D } from "simplex-noise";

type Point = [number, number];

type Step = {
  point: Point;
  size: number;
  offset: [number, number];
};

const noise2D = createNoise2D();

function generateRandomWave(
  start: Point,
  end: Point,
  maxAmplitude: number
): Point[] {
  const [x1, y1] = start;
  const [x2, y2] = end;
  const length = Math.hypot(x2 - x1, y2 - y1);
  const steps = 2 + Math.ceil(length / 20);

  const wave: Point[] = [];

  for (let i = 0; i <= steps; i++) {
    const t = i / steps;
    const x = x1 + t * (x2 - x1);
    const y = y1 + t * (y2 - y1);
    const amplitude = maxAmplitude * noise2D(x, y);
    wave.push([x, y + amplitude]);
  }

  return wave;
}

export function renderLineWithFluctuatingThickness(
  ctx: OffscreenCanvasRenderingContext2D,
  line: Point[],
  maxThickness: number,
  noise: (x: number) => number
) {
  const [start, end] = line;
  const [x1, y1] = start;
  const [x2, y2] = end;
  const length = Math.hypot(x2 - x1, y2 - y1);
  const steps = Math.ceil(length);

  ctx.beginPath();
  ctx.moveTo(x1, y1);

  let lastOffset = [0, 0];

  for (let i = 0; i <= steps; i++) {
    const t = i / steps;
    const x = x1 + t * (x2 - x1);
    const y = y1 + t * (y2 - y1);
    const positiveValue = 0.5 + 0.5 * noise2D(i / 100, 0);

    const offsetX = noise2D(x, 0);
    const offsetY = noise2D(0, y);

    lastOffset = [offsetX, offsetY];
    const thickness = maxThickness * positiveValue;
    ctx.lineTo(x + offsetX, y + offsetY);
    ctx.lineWidth = thickness;
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(x + offsetX, y + offsetY);
  }
}
